@setright 120
                          libserial: Biblioteca de manejo de comunicaciones por puerto serie
                                                 Documentación de uso

Fecha:   2019.02.01
Versión: 1.5.0

1. Introducción
---------------

El "puerto serie" es probablemente el recurso más universal para comunicaciones entre dispositivos. En el entorno del
ordenador personal, el puerto serie ha mutado hacia el USB, que estrictamente también es un puerto serie, aunque con
características y operativa específicas y mucho más definidas. En entornos embebidos, sin embargo, el puerto serie
sigue siendo una herramienta básica para comunicar el sistema principal y sus periféricos.

La operativa básica del puerto serie es muy sencilla, abstraída por el sistema operativo como un acceso a un archivo
especial. Sin embargo, el puerto serie es lo bastante complejo como para requerir un manejo especial en algunas
circunstancias. En estos casos, la documentación del sistema operativo no siempre es clara o completa.

El propósito de esta librería es facilitar la operativa básica con un comportamiento definido por omisión, al tiempo
que se proporcionan métodos documentados para operativas más complejas.

Puede encontrarse más información sobre la programación del puerto serie aquí:
http://tldp.org/HOWTO/Serial-Programming-HOWTO/x115.html para más información.


2. Operativa de las comunicaciones por puerto serie
---------------------------------------------------

La operativa se puede dividir en tres partes: configuración, entrada/salida y control.

La configuración consiste en establecer los parámetros de comunicaciones tales como velocidad (baudrate), tamaño de
carácter, bits de arranque y parada, etc., así como los parámetros de operación como modo de lectura, control de flujo,
etc. Esta configuración se establece al abrir el dispositivo.

La entrada/salida consiste en enviar y recibir datos a través del puerto, utilizando las funciones de lectura y
escritura.

El control consiste en supervisar el estado de la comunicación y del puerto, en concreto las colas de entrada y salida
y el estado de las líneas de control.


3. Uso de la clase
------------------

La funcionalidad al completo está encapsulada en una sola clase.

Una vez construido el objeto, la primera función a utilizar será Open. El resto de funciones devolverá error si no se
dispone de un puerto abierto y configurado.

La función Open acepta muchos parámetros para definir la configuración del puerto, pero solamente dos de ellos son
obligatorios: el path al dispositivo (como "/dev/ttyS0") y la velocidad (baudrate) requerido. El puerto serie solo
admite un conjunto discreto de valores de velocidad; la clase calcula el valor de baudrate inferior más cercano.

Las funciones Read, Write y WriteByte se emplean para enviar y recibir datos. Los sistemas operativos suelen ofrecer
búferes de entrada/salida de muy corta capacidad; esto pone el foco en los mecanismos para controlar el flujo de datos
a través del puerto a fin de evitar efectos indeseados.

Para la lectura de datos se pueden emplear dos estrategias distintas: bloqueante y no bloqueante. La lectura bloqueante
es conceptualmente más simple: típicamente implica disponer de un thread dedicado a la lectura, que queda bloqueado
(i.e. inactivo) hasta la recepción de los datos requeridos (o se supere el timeout). Para esta modalidad basta con las
funciones Read y Write.

Por su parte, la lectura no bloqueante implica realizar un control más detallado del estado del puerto serie. Suele
implementarse como un bucle iterativo que comprueba frecuentemente el estado del puerto, copia los datos cuando están
disponibles y los procesa cuando se completa la recepción de un paquete. Aunque más complejo que el anterior, suele ser
más fácil implementar de este modo protocolos con paquetes diferenciados por delimitadores. Además de Read y Write, en
este caso se suelen emplear PendingRead y PendingWrite para supervisar el estado de las colas.


4. Ejemplos de uso
------------------

Modalidad de lectura no bloqueante

  Serial puerto;
  puerto.Open("/dev/ttyUSB0", 115200, Serial::NonBlocking);

  /* ... */

  uint8_t buffer[BUFFER_LENGTH];
  int pos_buffer;
  bool loop = true;
  while (loop)
  {
    uint8_t byte;
    switch (puerto.Read(&byte, 1, Serial::NO_TIMEOUT))
    {
      case -1:        // Error
        perror("Error de lectura");
        loop = false;
        break;
      case 0:         // no hay datos disponibles
        do_something_else();
        break;
      case 1:         // recibido 1 byte
        buffer[pos_buffer++] = byte;
        if (byte == terminator)
        {
          process_message(buffer, pos_buffer);
          pos_buffer = 0;
        }
        else if (pos_buffer >= BUFFER_LENGTH)
        {
          puts("Buffer overrun.");
          pos_buffer = 0;
        }
        break;
    }
  }


5. Consideraciones de uso
-------------------------

Ni el sistema operativo ni la librería impiden que varios procesos abran simultáneamente el mismo puerto. Sin embargo,
debe tenerse en cuenta que cuando dos procesos compiten por leer un puerto serie, los datos recibidos no se duplican
sino que se reparten entre los procesos competidores; y cuando dos procesos escriben al mismo tiempo, los datos llegan
intercalados al otro extremo. Se necesitará implementar alguna forma de serializar el acceso para evitarlo.
